from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
import asyncio
import logging
import os

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")

bot = Bot(token=TOKEN)
dp = Dispatcher()

logging.basicConfig(level=logging.INFO)

@dp.message(Command("start"))
async def start_handler(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–∫–∞–∑–∞—Ö.")

async def send_order_notification(order_data, products):
    try:
        text = f"üì¶ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*\n\nüë§ *–ö–æ–Ω—Ç–∞–∫—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞:* {order_data['contacts']}\n\nüõç *–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:*\n"
        for item in order_data["items"]:
            pid = int(item.get("product_id"))
            product = next((p for p in products if p["id"] == pid), None)
            name = product["name"] if product else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä"
            size = item.get("size", "–ù–µ —É–∫–∞–∑–∞–Ω")
            color = item.get("color", "–ù–µ —É–∫–∞–∑–∞–Ω")
            text += f" - {name} (–†–∞–∑–º–µ—Ä: {size}, –¶–≤–µ—Ç: {color})\n"

        await bot.send_message(ADMIN_ID, text, parse_mode="Markdown")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

async def main():
    await dp.start_polling(bot)
